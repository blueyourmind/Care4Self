<body class="body-index">
  <div class="container">
    <div class="content">
      <div class="filter-meds" role="group" aria-label="Filter Medications">
        <%= link_to 'All', medications_path, class: 'btn btn-secondary index' %>
        <%= link_to 'Today', medications_path(filter: 'today'), class: 'btn btn-secondary index' %>
        <%= link_to 'Tomorrow', medications_path(filter: 'tomorrow'), class: 'btn btn-secondary index' %>
      </div>

      <% if @notifications.present? && @notifications.respond_to?(:each) %>
  <% @notifications.each do |notification| %>
    <% unless notification.read? %>
      <div class="alert alert-info">
        <%= notification.message %>
      </div>
    <% end %>
  <% end %>
<% end %>



      <div class="date-index">
        <% if @date %>
          <p><%= @date %></p>
        <% end %>
      </div>

      <div class="meds-c">
        <% if @medications.present? %>
          <% @medications.reverse.each do |medication| %>
            <div class="rectangle-medi SlideDown">
              <a href="<%= medication_path(medication) %>" class="medication-link">
                <img src="https://i.ibb.co/1Rx7HYZ/pngwing-com-2.png" alt="pngwing-com-2" class="medication-image">
                <div class="medication-info">
                  <h5 class="medication-name"><%= medication.name %></h5>
                  <p class="medication-type"><%= medication.med_type %></p>
                </div>
              </a>
            </div>
          <% end %>
        <% else %>
          <p>No medications found.</p>
        <% end %>
      </div>
    </div>
  </div>

<script>
  document.addEventListener("DOMContentLoaded", function() {

   // Function to display notifications
function displayNotifications(notifications) {
  const notificationsContainer = document.getElementById('notificationsContainer');

  if (!notificationsContainer) {
    console.error('Notifications container not found!');
    return;
  }

  // Clear existing notifications
  notificationsContainer.innerHTML = '';

  // Check if notifications is an array before iterating
  if (Array.isArray(notifications)) {
    // Iterate through notifications and append to the container
    notifications.forEach(notification => {
      if (!isNotificationDisplayed(notification.id)) {
        const notificationCard = createNotificationCard(notification);
        notificationsContainer.appendChild(notificationCard);
        markNotificationAsDisplayed(notification.id);
      }
    });
  } else {
    console.error('Invalid or null notifications array.');
  }
}


    // Function to create a notification card
    function createNotificationCard(notification) {
      const card = document.createElement('div');
      card.classList.add('notification-card');

      const message = document.createElement('p');
      message.textContent = notification.message;
      card.appendChild(message);

      // Add an <audio> element for the notification sound
    //  const audio = document.createElement('audio');
// audio.src = '.app/assets/images/sound.mp3';
// audio.autoplay = true; // Keep autoplay set to true
// card.appendChild(audio);


      const closeButton = document.createElement('button');
      closeButton.textContent = 'Close';
      closeButton.classList.add('close-notification'); // Add a class for event delegation
      closeButton.dataset.notificationId = notification.id; // Set the notification ID as a data attribute
      closeButton.addEventListener('click', () => {
        card.remove();
        deleteNotification(notification.id); // Call the function to delete the notification
        unmarkNotificationAsDisplayed(notification.id);
      });
      card.appendChild(closeButton);

      return card;
    }

   // Function to calculate the time difference and fetch notifications accordingly
    function calculateTimeDifference(medicationStartTime) {
      const currentTime = new Date();
      const timeDifference = medicationStartTime - currentTime;

      if (timeDifference > 0) {
        console.log('Time difference:', timeDifference);

        // Set a timeout to fetch notifications when the time difference becomes zero
        setTimeout(() => fetchNotifications(), Math.max(timeDifference, 1000)); // Minimum timeout of 1000 milliseconds
      } else {
        console.log('Medication start time has already passed.');
      }
    }

    // Function to fetch notifications
    function fetchNotifications() {
      console.log('Fetching notifications...');
      fetch('/notifications')
        .then(response => response.json())
        .then(data => {
          console.log('Fetched notifications:', data);
          displayNotifications(data);
        })
        .catch(error => console.error('Error fetching notifications:', error));
    }

    // Function to delete a notification via AJAX
    function deleteNotification(notificationId) {
      fetch(`/notifications/${notificationId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': Rails.csrfToken(), // Include the CSRF token
        },
      })
        .then(response => {
          if (!response.ok) {
            throw new Error(`Error deleting notification: ${response.statusText}`);
          }
          console.log('Notification deleted successfully.');
        })
        .catch(error => console.error(error));
    }

    // Function to check if a notification has been displayed
    function isNotificationDisplayed(notificationId) {
      const displayedNotifications = getDisplayedNotifications();
      return displayedNotifications.includes(notificationId);
    }

    // Function to mark a notification as displayed
    function markNotificationAsDisplayed(notificationId) {
      const displayedNotifications = getDisplayedNotifications();
      displayedNotifications.push(notificationId);
      setDisplayedNotifications(displayedNotifications);
    }

    // Function to unmark a notification as displayed
    function unmarkNotificationAsDisplayed(notificationId) {
      const displayedNotifications = getDisplayedNotifications();
      const index = displayedNotifications.indexOf(notificationId);
      if (index !== -1) {
        displayedNotifications.splice(index, 1);
        setDisplayedNotifications(displayedNotifications);
      }
    }

    // Function to get displayed notifications from local storage
    function getDisplayedNotifications() {
      const displayedNotificationsJSON = localStorage.getItem('displayedNotifications');
      return displayedNotificationsJSON ? JSON.parse(displayedNotificationsJSON) : [];
    }

    // Function to set displayed notifications in local storage
    function setDisplayedNotifications(displayedNotifications) {
      const displayedNotificationsJSON = JSON.stringify(displayedNotifications);
      localStorage.setItem('displayedNotifications', displayedNotificationsJSON);
    }

    // Assuming medicationStartTimes is an array of start times sent from your Rails view
    const medicationStartTimes =
      [
        <% if user_signed_in? && !@medications.nil? %>
        <% @medications.each do |medication| %>
        new Date('<%= medication.start_time %>'),
        <% end %>
        <% end %>
      ];

    // Calculate time differences for each medication
    medicationStartTimes?.forEach(medicationStartTime => {
      calculateTimeDifference(medicationStartTime);
    });
  });
</script>




</body>
